name: ELK-FastAPI

on:
  pull_request:

  push:
    branches:
      - main 

permissions:
  contents: write
  id-token: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
      - uses: actions/checkout@v3
      - name: Install Poetry
        run: pipx install poetry
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "poetry"

      - name: Cache dependencies
        uses: actions/cache@v3
        id: cache
        with:
          path: ~/.virtualenvs
          key: poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Set poetry config
        run: |
          poetry config virtualenvs.in-project false
          poetry config virtualenvs.path ~/.virtualenvs

      - name: Install dependencies
        run: poetry install
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint with task
        run: task format

      - name: Test with Pytest
        run: task test

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python and cache dependencies
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
          cache: pip
      - name: Cache Poetry virtual environment
        id: cache-poetry
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
        if: steps.cache-poetry.outputs.cache-hit != 'true'

      - name: Run semantic-release
        run: |
          poetry run semantic-release publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}